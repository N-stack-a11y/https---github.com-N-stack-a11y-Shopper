{"ast":null,"code":"/** import React, { createContext, useState } from \"react\";\r\nimport all_product from \"../Components/Assets/all_product\";\r\n\r\nexport const ShopContext = createContext(null);\r\n\r\nconst getDefaultCart = ()=>{\r\n    let cart ={};\r\n    for (let index = 0; index < all_product.length+1; index++) {\r\n        cart[index] = 0;\r\n    }\r\n    return cart;\r\n}\r\n\r\nconst ShopContextProvider = (props) => {\r\n    const [CartItems,setCartItems] = useState(getDefaultCart());\r\n        const addToCart = (itemId) =>{\r\n        setCartItems((prev)=>({...prev,[itemId]:prev[itemId]+1})); \r\n        console.log(CartItems);\r\n    }\r\n\r\n    const removeFromCart = (itemId) =>{\r\n        setCartItems((prev)=>({...prev,[itemId]:prev[itemId]-1}))\r\n    }\r\n\r\n      const getTotalCartAmount = () => {\r\n        let totalAmount = 0;\r\n        for(const item in CartItems)\r\n        {\r\n            if(CartItems[item]>0)\r\n            {\r\n                let itemInfo = all_product.find((product)=>product.id===Number(item));\r\n                totalAmount += itemInfo.new_price * CartItems[item];\r\n            }\r\n           return totalAmount;\r\n        }\r\n    }\r\n        const getTotalCartItems = () =>{\r\n            let totalItem = 0;\r\n            for(const item in CartItems)\r\n            {\r\n                if(CartItems[item]>0)\r\n                {\r\n                    totalItem+= CartItems[item];\r\n                }\r\n            }\r\n        return totalItem;\r\n    } \r\n    const contextValue = {getTotalCartItems,getTotalCartAmount,all_product,CartItems,addToCart,removeFromCart};\r\n    \r\n    return(\r\n    <ShopContext.Provider value={contextValue}>\r\n    {props.children}\r\n    </ShopContext.Provider>\r\n)\r\n}\r\n\r\nexport default ShopContextProvider;  */","map":{"version":3,"names":[],"sources":["C:/Users/Admin/Desktop/E-COMMERCE/Frontend/TestApplication/src/Context/ShopContext.jsx"],"sourcesContent":["/** import React, { createContext, useState } from \"react\";\r\nimport all_product from \"../Components/Assets/all_product\";\r\n\r\nexport const ShopContext = createContext(null);\r\n\r\nconst getDefaultCart = ()=>{\r\n    let cart ={};\r\n    for (let index = 0; index < all_product.length+1; index++) {\r\n        cart[index] = 0;\r\n    }\r\n    return cart;\r\n}\r\n\r\nconst ShopContextProvider = (props) => {\r\n    const [CartItems,setCartItems] = useState(getDefaultCart());\r\n        const addToCart = (itemId) =>{\r\n        setCartItems((prev)=>({...prev,[itemId]:prev[itemId]+1})); \r\n        console.log(CartItems);\r\n    }\r\n\r\n    const removeFromCart = (itemId) =>{\r\n        setCartItems((prev)=>({...prev,[itemId]:prev[itemId]-1}))\r\n    }\r\n\r\n      const getTotalCartAmount = () => {\r\n        let totalAmount = 0;\r\n        for(const item in CartItems)\r\n        {\r\n            if(CartItems[item]>0)\r\n            {\r\n                let itemInfo = all_product.find((product)=>product.id===Number(item));\r\n                totalAmount += itemInfo.new_price * CartItems[item];\r\n            }\r\n           return totalAmount;\r\n        }\r\n    }\r\n        const getTotalCartItems = () =>{\r\n            let totalItem = 0;\r\n            for(const item in CartItems)\r\n            {\r\n                if(CartItems[item]>0)\r\n                {\r\n                    totalItem+= CartItems[item];\r\n                }\r\n            }\r\n        return totalItem;\r\n    } \r\n    const contextValue = {getTotalCartItems,getTotalCartAmount,all_product,CartItems,addToCart,removeFromCart};\r\n    \r\n    return(\r\n    <ShopContext.Provider value={contextValue}>\r\n    {props.children}\r\n    </ShopContext.Provider>\r\n)\r\n}\r\n\r\nexport default ShopContextProvider;  */"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}