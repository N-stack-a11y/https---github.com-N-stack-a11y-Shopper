{"ast":null,"code":"/** import React, { createContext, useState, useEffect } from \"react\";\r\n\r\n\r\nexport const ShopContext = createContext(null);\r\n\r\nconst getDefaultCart = () => {\r\n    let cart = {};\r\n    for (let index = 0; index < 300+1; index++) {\r\n        cart[index] = 0;\r\n    }\r\n    return cart;\r\n};\r\n\r\nconst ShopContextProvider = (props) => {\r\n\r\n    const [all_product,setAll_Product] = useState([]);\r\n    const [CartItems, setCartItems] = useState(getDefaultCart());\r\n\r\n    useEffect(()=>{\r\n        fetch('http://localhost:3000/allproducts')\r\n        .then((response)=>response.json())\r\n        .then((data)=>setAll_Product(data))\r\n\r\n        if(localStorage.getItem('auth-token')){\r\n            fetch('http://localhost:3000/getcart',{\r\n                method:'POST',\r\n                headers:{\r\n                    Accept:'application/form-data',\r\n                    'auth-token':`${localStorage.getItem('auth-token')}`,\r\n                    'Content-Type':'application/json',\r\n                },\r\n                body:\"\",\r\n            }).then((response)=>response.json())\r\n            .then((data)=>setCartItems(data));\r\n        }\r\n    },[])\r\n    \r\n    const addToCart = (itemId) => {\r\n        setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\r\n        if(localStorage.getItem('auth-token')){\r\n            fetch('http://localhost:3000/addtocart',{\r\n                method:'POST',\r\n                headers:{\r\n                    Accept:'application/form-data',\r\n                    'auth-token':`${localStorage.getItem('auth-token')}`,\r\n                    'Content-Type':'application/json',\r\n                },\r\n                body:JSON.stringify({\"itemId\":itemId}),\r\n            })\r\n            .then((response)=>response.json())\r\n            .then((data)=>console.log(data));\r\n        }\r\n    }\r\n    const removeFromCart = (itemId) => {\r\n        setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\r\n        if(localStorage.getItem('auth-token')){\r\n            if(localStorage.getItem('auth-token')){\r\n                fetch('http://localhost:3000/removefromcart',{\r\n                    method:'POST',\r\n                    headers:{\r\n                        Accept:'application/form-data',\r\n                        'auth-token':`${localStorage.getItem('auth-token')}`,\r\n                        'Content-Type':'application/json',\r\n                    },\r\n                    body:JSON.stringify({\"itemId\":itemId}),\r\n                })\r\n                .then((response)=>response.json())\r\n                .then((data)=>console.log(data));\r\n            }\r\n        }\r\n    };\r\n\r\n    const getTotalCartAmount = () => {\r\n        let totalAmount = 0;\r\n        for (const item in CartItems) {\r\n            if (CartItems[item] > 0) {\r\n                let itemInfo = all_product.find((product) => product.id === Number(item));\r\n                if (itemInfo) {\r\n                    totalAmount += itemInfo.new_price * CartItems[item];\r\n                }\r\n            }\r\n        }\r\n        return totalAmount;\r\n    };\r\n\r\n    const getTotalCartItems = () => {\r\n        let totalItem = 0;\r\n        for (const item in CartItems) {\r\n            if (CartItems[item] > 0) {\r\n                totalItem += CartItems[item];\r\n            }\r\n        }\r\n        return totalItem;\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(\"CartItems updated:\", CartItems);\r\n    }, [CartItems]);\r\n\r\n    const contextValue = {\r\n        getTotalCartItems,\r\n        getTotalCartAmount,\r\n        all_product: all_product || [],\r\n        CartItems: CartItems || {},\r\n        addToCart,\r\n        removeFromCart,\r\n    };\r\n\r\n    return (\r\n        <ShopContext.Provider value={contextValue}>\r\n            {props.children}\r\n        </ShopContext.Provider>\r\n    );\r\n};\r\n\r\nexport default ShopContextProvider;\r\n/** import React, { createContext, useState } from \"react\";\r\nimport all_product from \"../Components/Assets/all_product\";\r\n\r\nexport const ShopContext = createContext(null);\r\n\r\nconst getDefaultCart = ()=>{\r\n    let cart ={};\r\n    for (let index = 0; index < all_product.length+1; index++) {\r\n        cart[index] = 0;\r\n    }\r\n    return cart;\r\n}\r\n\r\nconst ShopContextProvider = (props) => {\r\n    const [CartItems,setCartItems] = useState(getDefaultCart());\r\n        const addToCart = (itemId) =>{\r\n        setCartItems((prev)=>({...prev,[itemId]:prev[itemId]+1})); \r\n        console.log(CartItems);\r\n    }\r\n\r\n    const removeFromCart = (itemId) =>{\r\n        setCartItems((prev)=>({...prev,[itemId]:prev[itemId]-1}))\r\n    }\r\n\r\n      const getTotalCartAmount = () => {\r\n        let totalAmount = 0;\r\n        for(const item in CartItems)\r\n        {\r\n            if(CartItems[item]>0)\r\n            {\r\n                let itemInfo = all_product.find((product)=>product.id===Number(item));\r\n                totalAmount += itemInfo.new_price * CartItems[item];\r\n            }\r\n           return totalAmount;\r\n        }\r\n    }\r\n        const getTotalCartItems = () =>{\r\n            let totalItem = 0;\r\n            for(const item in CartItems)\r\n            {\r\n                if(CartItems[item]>0)\r\n                {\r\n                    totalItem+= CartItems[item];\r\n                }\r\n            }\r\n        return totalItem;\r\n    } \r\n    const contextValue = {getTotalCartItems,getTotalCartAmount,all_product,CartItems,addToCart,removeFromCart};\r\n    \r\n    return(\r\n    <ShopContext.Provider value={contextValue}>\r\n    {props.children}\r\n    </ShopContext.Provider>\r\n)\r\n}\r\n\r\nexport default ShopContextProvider;  */","map":{"version":3,"names":[],"sources":["C:/Users/Admin/Desktop/E-Commerce/Frontend/src/Context/ShopContext.jsx"],"sourcesContent":["/** import React, { createContext, useState, useEffect } from \"react\";\r\n\r\n\r\nexport const ShopContext = createContext(null);\r\n\r\nconst getDefaultCart = () => {\r\n    let cart = {};\r\n    for (let index = 0; index < 300+1; index++) {\r\n        cart[index] = 0;\r\n    }\r\n    return cart;\r\n};\r\n\r\nconst ShopContextProvider = (props) => {\r\n\r\n    const [all_product,setAll_Product] = useState([]);\r\n    const [CartItems, setCartItems] = useState(getDefaultCart());\r\n\r\n    useEffect(()=>{\r\n        fetch('http://localhost:3000/allproducts')\r\n        .then((response)=>response.json())\r\n        .then((data)=>setAll_Product(data))\r\n\r\n        if(localStorage.getItem('auth-token')){\r\n            fetch('http://localhost:3000/getcart',{\r\n                method:'POST',\r\n                headers:{\r\n                    Accept:'application/form-data',\r\n                    'auth-token':`${localStorage.getItem('auth-token')}`,\r\n                    'Content-Type':'application/json',\r\n                },\r\n                body:\"\",\r\n            }).then((response)=>response.json())\r\n            .then((data)=>setCartItems(data));\r\n        }\r\n    },[])\r\n    \r\n    const addToCart = (itemId) => {\r\n        setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\r\n        if(localStorage.getItem('auth-token')){\r\n            fetch('http://localhost:3000/addtocart',{\r\n                method:'POST',\r\n                headers:{\r\n                    Accept:'application/form-data',\r\n                    'auth-token':`${localStorage.getItem('auth-token')}`,\r\n                    'Content-Type':'application/json',\r\n                },\r\n                body:JSON.stringify({\"itemId\":itemId}),\r\n            })\r\n            .then((response)=>response.json())\r\n            .then((data)=>console.log(data));\r\n        }\r\n    }\r\n    const removeFromCart = (itemId) => {\r\n        setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\r\n        if(localStorage.getItem('auth-token')){\r\n            if(localStorage.getItem('auth-token')){\r\n                fetch('http://localhost:3000/removefromcart',{\r\n                    method:'POST',\r\n                    headers:{\r\n                        Accept:'application/form-data',\r\n                        'auth-token':`${localStorage.getItem('auth-token')}`,\r\n                        'Content-Type':'application/json',\r\n                    },\r\n                    body:JSON.stringify({\"itemId\":itemId}),\r\n                })\r\n                .then((response)=>response.json())\r\n                .then((data)=>console.log(data));\r\n            }\r\n        }\r\n    };\r\n\r\n    const getTotalCartAmount = () => {\r\n        let totalAmount = 0;\r\n        for (const item in CartItems) {\r\n            if (CartItems[item] > 0) {\r\n                let itemInfo = all_product.find((product) => product.id === Number(item));\r\n                if (itemInfo) {\r\n                    totalAmount += itemInfo.new_price * CartItems[item];\r\n                }\r\n            }\r\n        }\r\n        return totalAmount;\r\n    };\r\n\r\n    const getTotalCartItems = () => {\r\n        let totalItem = 0;\r\n        for (const item in CartItems) {\r\n            if (CartItems[item] > 0) {\r\n                totalItem += CartItems[item];\r\n            }\r\n        }\r\n        return totalItem;\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(\"CartItems updated:\", CartItems);\r\n    }, [CartItems]);\r\n\r\n    const contextValue = {\r\n        getTotalCartItems,\r\n        getTotalCartAmount,\r\n        all_product: all_product || [],\r\n        CartItems: CartItems || {},\r\n        addToCart,\r\n        removeFromCart,\r\n    };\r\n\r\n    return (\r\n        <ShopContext.Provider value={contextValue}>\r\n            {props.children}\r\n        </ShopContext.Provider>\r\n    );\r\n};\r\n\r\nexport default ShopContextProvider;\r\n/** import React, { createContext, useState } from \"react\";\r\nimport all_product from \"../Components/Assets/all_product\";\r\n\r\nexport const ShopContext = createContext(null);\r\n\r\nconst getDefaultCart = ()=>{\r\n    let cart ={};\r\n    for (let index = 0; index < all_product.length+1; index++) {\r\n        cart[index] = 0;\r\n    }\r\n    return cart;\r\n}\r\n\r\nconst ShopContextProvider = (props) => {\r\n    const [CartItems,setCartItems] = useState(getDefaultCart());\r\n        const addToCart = (itemId) =>{\r\n        setCartItems((prev)=>({...prev,[itemId]:prev[itemId]+1})); \r\n        console.log(CartItems);\r\n    }\r\n\r\n    const removeFromCart = (itemId) =>{\r\n        setCartItems((prev)=>({...prev,[itemId]:prev[itemId]-1}))\r\n    }\r\n\r\n      const getTotalCartAmount = () => {\r\n        let totalAmount = 0;\r\n        for(const item in CartItems)\r\n        {\r\n            if(CartItems[item]>0)\r\n            {\r\n                let itemInfo = all_product.find((product)=>product.id===Number(item));\r\n                totalAmount += itemInfo.new_price * CartItems[item];\r\n            }\r\n           return totalAmount;\r\n        }\r\n    }\r\n        const getTotalCartItems = () =>{\r\n            let totalItem = 0;\r\n            for(const item in CartItems)\r\n            {\r\n                if(CartItems[item]>0)\r\n                {\r\n                    totalItem+= CartItems[item];\r\n                }\r\n            }\r\n        return totalItem;\r\n    } \r\n    const contextValue = {getTotalCartItems,getTotalCartAmount,all_product,CartItems,addToCart,removeFromCart};\r\n    \r\n    return(\r\n    <ShopContext.Provider value={contextValue}>\r\n    {props.children}\r\n    </ShopContext.Provider>\r\n)\r\n}\r\n\r\nexport default ShopContextProvider;  */"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}